sapply(WhiskyDf$cluster_name, function(cluster_name) {
if(cluster_name == "Cluster 1") {
"blue"
} else if(cluster_name == "Cluster 2") {
"orange"
} else
{
"green"
} })
}
iconss <- awesomeIcons(
icon = 'ios-open',
iconColor = 'white',
library = 'ion',
markerColor =getColor(sd)
)
bscols(
m <-  leaflet(sd) %>%
leaflet::addAwesomeMarkers(
popup = ~paste0(
whisky$Distillery
),
icon = awesomeIcons(
library = "ion",
icon = iconss,
iconColor = "white")
)
,
d3scatter (sd, ~WhiskyDf$Comp.1, ~WhiskyDf$Comp.2, width = "100%", height = 300,color = WhiskyDf$cluster_name,)
)
##############################
data <- whisky[,flavor]
rownames(data) <- paste0(whisky$Distillery)
pcaWhisky <- princomp(data, cor = TRUE)
# scree plot
#plot(pcaWhisky, type = "l")
# cluster Whisky
WhiskyHC <- hclust(dist(pcaWhisky$scores), method = "ward.D2")
# cut the dendrogram into 3 clusters
WhiskyClusters <- cutree(WhiskyHC, k = 3)
# add cluster to data frame of scores
WhiskyDf <- data.frame(pcaWhisky$scores, "cluster" = factor(WhiskyClusters))
WhiskyDf <- transform(WhiskyDf, cluster_name = paste("Cluster",WhiskyClusters))
library(d3scatter)
getColor <- function(WhiskyDf) {
sapply(WhiskyDf$cluster_name, function(cluster_name) {
if(cluster_name == "Cluster 1") {
"blue"
} else if(cluster_name == "Cluster 2") {
"orange"
} else
{
"green"
} })
}
iconss <- awesomeIcons(
icon = 'ios-open',
iconColor = 'white',
library = 'ion',
markerColor =getColor(sd)
)
bscols(
m <-  leaflet(sd) %>%
leaflet::addAwesomeMarkers(
popup = ~paste0(
whisky$Distillery
),
icon = awesomeIcons(
library = "ion",
icon = iconss,
iconColor = "white")
)
,
d3scatter (sd, ~WhiskyDf$Comp.1, ~WhiskyDf$Comp.2, width = "100%", height = 300,color = WhiskyDf$cluster_name,)
)
View(sd)
runApp('IA640/Shiny/P2')
##############################
data <- whisky[,flavor]
rownames(data) <- paste0(whisky$Distillery)
pcaWhisky <- princomp(data, cor = TRUE)
# scree plot
#plot(pcaWhisky, type = "l")
# cluster Whisky
WhiskyHC <- hclust(dist(pcaWhisky$scores), method = "ward.D2")
# cut the dendrogram into 3 clusters
WhiskyClusters <- cutree(WhiskyHC, k = 3)
# add cluster to data frame of scores
WhiskyDf <- data.frame(pcaWhisky$scores, "cluster" = factor(WhiskyClusters))
WhiskyDf <- transform(WhiskyDf, cluster_name = paste("Cluster",WhiskyClusters))
library(d3scatter)
getColor <- function(WhiskyDf) {
sapply(WhiskyDf$cluster_name, function(cluster_name) {
if(cluster_name == "Cluster 1") {
"blue"
} else if(cluster_name == "Cluster 2") {
"orange"
} else
{
"green"
} })
}
iconss <- awesomeIcons(
icon = 'ios-open',
iconColor = 'white',
library = 'ion',
markerColor =getColor(sd)
)
bscols(
m <-  leaflet(sd) %>%
leaflet::addAwesomeMarkers(
popup = ~paste0(
whisky$Distillery
)
)
,
d3scatter (sd, ~WhiskyDf$Comp.1, ~WhiskyDf$Comp.2, width = "100%", height = 300,color = WhiskyDf$cluster_name,)
)
library(flexdashboard)
library(shiny)
library(maptools)
library(ggplot2)
library(tidyr)
library(dplyr)
library(purrr)
library(leaflet)
library(plotly)
library(RCurl)
library(data.table)
library(sp)
library(tidyverse)
library(raster)
library(rgdal)
library(ggiraphExtra)
library(DT)  # interactive tables
library(crosstalk)  # inter-widget interactivity
leaflet(sd)
leaflet(whisky)
shiny::runApp('IA640/project/PJ2')
runApp('IA640/project/PJ2')
runApp('IA640/project/PJ2')
runApp('IA640/project/PJ2')
runApp('IA640/project/PJ2')
runApp('IA640/project/PJ2')
runApp('IA640/project/PJ2')
runApp('IA640/project/PJ2')
runApp('IA640/project/PJ2')
setwd("~/IA640/project/PJ2")
cache_all_turntiles_data <- readRDS("~/IA640/project/PJ2/data/cache_all_turntiles_data.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(cache_all_turntiles_data)
max(cache_all_turntiles_data$date)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.Date(min(cache_all_turntiles_data$date))
as.Date(min(cache_all_turntiles_data$date), "%m/%d/%y")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
all_clean()
all_clean <- reactiveVal(read_rds("data/cache_all_turntiles_data.rds"))
all_clean
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.Date(max(all_clean()$date)
as.Date(min(all_clean()$date),"%m/%d/%y")
as.Date(min(all_clean()$date),"%m/%d/%y")
all_clean <- reactiveVal(read_rds("data/cache_all_turntiles_data.rds"))
as.Date(min(all_clean()$date),"%m/%d/%y")
runApp()
as.Date(min(all_clean()$date),"%m/%d/%y")
View(cache_all_turntiles_data)
as.Date(min(cache_all_turntiles_data$date),"%m/%d/%y")
as.Date(min(cache_all_turntiles_data$date),"m/d/y")
as.Date(min(cache_all_turntiles_data$date),"%mm/%dd/%yyyy")
as.Date(min(cache_all_turntiles_data$date),"%m/%d/%y")
as.Date(max(cache_all_turntiles_data$date),"%m/%d/%y")
as.Date(min(cache_all_turntiles_data$date),"%m/%d/%y")
as.Date(max(cache_all_turntiles_data$date),"%m/%d/%y")
as.Date(max(cache_all_turntiles_data$date),"%d/%m/%y")
as.Date(max(cache_all_turntiles_data$date),"%dd/%mm/%y")
max(cache_all_turntiles_data$date)
runApp()
as.Date(max(cache_all_turntiles_data$date),"%dd/%mm/%y")
as.Date(max(cache_all_turntiles_data$date),"%m/%d/%y")
max(cache_all_turntiles_data$date)
as.Date(max(cache_all_turntiles_data$date),"%m/%d/%y")
as.Date(max(cache_all_turntiles_data$date),"%m/%d/%y",tryFormats = c("%Y-%m-%d", "%Y/%m/%d"))
as.Date(max(cache_all_turntiles_data$date),"%d/%m/%y"
as.Date(max(cache_all_turntiles_data$date),"%d/%m/%y"
as.Date(max(cache_all_turntiles_data$date),"%d/%m/%y")
as.Date(max(cache_all_turntiles_data$date),"%y/%m/%d")
as.Date(max(cache_all_turntiles_data$date),"%m/%d/%y"
as.Date(max(cache_all_turntiles_data$date),"%m/%d/%y")
as.Date(max(cache_all_turntiles_data$date),"%m/%d/%y")
as.Date("03/12/2021"),"%m/%d/%y")
as.Date('03/12/2021'),"%m/%d/%y")
as.Date(max(cache_all_turntiles_data$date),"%m/%d/%y")
as.Date(max(cache_all_turntiles_data$date),"%m-%d-%y"
as.Date(max(cache_all_turntiles_data$date),"%m-%d-%y"
as.Date(max(cache_all_turntiles_data$date),"%m-%d-%y")
as.Date(max(cache_all_turntiles_data$date),"%m/%d/%y")
as.Date(max(cache_all_turntiles_data$date),"%m/%d/%Y")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/IA640/project/PJ2/app.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/IA640/project/PJ2")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
cache_all_turntiles_data <- readRDS("~/IA640/project/PJ2/data/cache_all_turntiles_data.rds")
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
alldata
shiny::runApp()
max(all_clean()$date
max(all_clean()$date)
max(all_clean()$date)
min(all_clean()$date)
filter(all_clean()$date < as.Date(input$slide,"%m/%d/%Y"))
all_clean()$date < as.Date(input$slide,"%m/%d/%Y")
shiny::runApp()
runApp()
runApp()
c(all_clean()$exits, all_clean()$entries)
runApp()
runApp()
all_clean()[,c("exits", "entries")]
runApp()
~`gtfs_longitude`
all_clean()$gtfs_longitude
cache_all_turntiles_data <- readRDS("~/IA640/project/PJ2/data/cache_all_turntiles_data.rds")
View(cache_all_turntiles_data)
shiny::runApp()
getSymbols("GOOG",
from = "2018-01-01",
to = "2019-12-31")
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(tidyquant)
install.packages("tidyquant")
library(tidyquant)
library(tidyquant)
library(tidyquant)
library(tidyquant)
library(tidyquant)
library(tidyquant)
install.packages("tidyquant")
library(tidyquant)
library(plotly)
library(plotly)
library(plotly)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
cache_all_turntiles_data <- readRDS("~/IA640/project/PJ2/data/cache_all_turntiles_data.rds")
alldata <-read_rds("data/cache_all_turntiles_data.rds")
alldata$date = as.Date(alldata$date,"%m/%d/%Y")
alldata <-  mutate(alldata,sum = exits + entries)
alldata$week <- floor_date(alldata$date, "week")
weeklydata <-  alldata %>% group_by(week,stop_name) %>% dplyr::summarize(sumweek = median(sum),exits= median(exits), entries= median(entries))
runApp()
shiny::runApp()
runApp()
all_clean()$date
View(weeklydata)
runApp()
runApp()
View(weeklydata)
plot_ly(weeklydata(), type = 'scatter', mode = 'lines') %>%
filter(weeklydata()$stop_name == "Astoria - Ditmars Blvd") %>%
add_trace(x = ~date, y = ~exits, name = 'Exits')%>%
add_trace(x = ~date, y = ~entries, name  =  'Entries')%>%
layout(showlegend = T)
plot_ly(weeklydata, type = 'scatter', mode = 'lines') %>%
filter(weeklydata$stop_name == "Astoria - Ditmars Blvd") %>%
add_trace(x = ~date, y = ~exits, name = 'Exits')%>%
add_trace(x = ~date, y = ~entries, name  =  'Entries')%>%
layout(showlegend = T)
plot_ly(weeklydata, type = 'scatter', mode = 'lines') %>%
filter(weeklydata$stop_name == "1 Av") %>%
add_trace(x = ~date, y = ~exits, name = 'Exits')%>%
add_trace(x = ~date, y = ~entries, name  =  'Entries')%>%
layout(showlegend = T)
plot_ly(weeklydata, type = 'scatter', mode = 'lines') %>%
filter(weeklydata$stop_name == "1 Av") %>%
add_trace(x = ~date, y = ~exits, name = 'exits')%>%
add_trace(x = ~date, y = ~entries, name  =  'entries')%>%
layout(showlegend = T)
layout(showlegend = T)
plot_ly(weeklydata(), type = 'scatter', mode = 'lines') %>%
filter(weeklydata()$stop_name == "Astoria - Ditmars Blvd") %>%
add_trace(x = ~week, y = ~exits, name = 'Exits')%>%
add_trace(x = ~week, y = ~entries, name  =  'Entries')%>%
layout(showlegend = T)
plot_ly(weeklydata, type = 'scatter', mode = 'lines') %>%
filter(weeklydata$stop_name == "Astoria - Ditmars Blvd") %>%
add_trace(x = ~week, y = ~exits, name = 'Exits')%>%
add_trace(x = ~week, y = ~entries, name  =  'Entries')%>%
layout(showlegend = T)
plot_ly(weeklydata, type = 'scatter', mode = 'lines') %>%
filter(weeklydata$stop_name == "1 Av") %>%
add_trace(x = ~week, y = ~exits, name = 'exits')%>%
add_trace(x = ~week, y = ~entries, name  =  'entries')%>%
layout(showlegend = T)
plot_ly(weeklydata, type = 'scatter', mode = 'lines') %>%
filter(weeklydata$stop_name == "121 St") %>%
add_trace(x = ~week, y = ~exits, name = 'exits')%>%
add_trace(x = ~week, y = ~entries, name  =  'entries')%>%
layout(showlegend = T)
plot_ly(weeklydata, type = 'scatter', mode = 'lines') %>%
filter(weeklydata$stop_name == "121 St") %>%
add_trace(x = ~week, y = ~exits, name = 'exits')%>%
add_trace(x = ~week, y = ~entries, name  =  'entries')%>%
layout(showlegend = T)
temp <- weeklydata[which(weeklydata$stop_name %in% "121 St")]
temp <- weeklydata[which(weeklydata$stop_name %in% "1 Av")]
weeklydata[which(weeklydata$stop_name %in% "1 Av"),]
runApp()
all_clean()$date
all_clean()[which(all_clean()$stop_name %in% "1 Av"),]
plot_ly(all_clean()[which(all_clean()$stop_name %in% "1 Av"),], type = 'scatter', mode = 'lines') %>%
add_trace(x = ~date, y = ~exits, name = 'Exits')%>%
add_trace(x = ~date, y = ~entries, name  =  'Entries')%>%
layout("Astoria - Ditmars Blvd",showlegend = T)
runApp()
temp <- alldata
clear(temp)
temp<- weeklydata
runApp()
alldata
all_clean
output$MTAplot<-renderPlotly({
plot_ly(all_clean[which(all_clean$stop_name %in% "1 Av"),], type = 'scatter', mode = 'lines') %>%
add_trace(x = ~date, y = ~exits, name = 'Exits')%>%
add_trace(x = ~date, y = ~entries, name  =  'Entries')%>%
layout("1 Av",showlegend = T)  })
plot_ly(all_clean[which(all_clean$stop_name %in% "1 Av"),]
..
all_clean[which(all_clean$stop_name %in% "1 Av"),]
plot_ly(all_clean[which(all_clean$stop_name %in% "1 Av"),], type = 'scatter', mode = 'lines') %>%
add_trace(x = all_clean$date, y = all_clean$exits, name = 'Exits')%>%
add_trace(x = all_clean$date, y = all_clean$entries, name  =  'Entries')%>%
layout("1 Av",showlegend = T)  })
plot_ly(all_clean, type = 'scatter', mode = 'lines') %>%
add_trace(x = all_clean$date, y = all_clean$exits, name = 'Exits')%>%
add_trace(x = all_clean$date, y = all_clean$entries, name  =  'Entries')%>%
layout("1 Av",showlegend = T)  })
plot_ly(all_clean, type = 'scatter', mode = 'lines') %>%
add_trace(x = ~date, y = ~exits, name = 'Exits')%>%
add_trace(x = ~date, y = ~entries, name  =  'Entries')%>%
layout("1 Av",showlegend = T)
all_clean
plot_ly(all_clean[which(all_clean$stop_name %in% "1 Av"),], type = 'scatter', mode = 'lines') %>%
add_trace(x = all_clean$date, y = all_clean$exits, name = 'Exits')%>%
add_trace(x = all_clean$date, y = all_clean$entries, name  =  'Entries')%>%
layout("1 Av",showlegend = T)
all_clean[which(all_clean$stop_name %in% "1 Av"),]
temp <-  all_clean[which(all_clean$stop_name %in% "1 Av"),]
View(temp)
plot_ly(temp, type = 'scatter', mode = 'lines') %>%
add_trace(x = ~date, y = ~exits, name = 'Exits')%>%
add_trace(x = ~date, y = ~entries, name  =  'Entries')%>%
layout("1 Av",showlegend = T)  })
plot_ly(temp, type = 'scatter', mode = 'lines') %>%
add_trace(x = temp$date, y = temp$exits, name = 'Exits')%>%
add_trace(x = temp$date, y = temp$entries, name  =  'Entries')%>%
layout("1 Av",showlegend = T)  })
plot_ly(temp, type = 'scatter', mode = 'lines') %>%
add_trace(x = temp$date, y = temp$exits, name = 'Exits')%>%
add_trace(x = temp$date, y = temp$entries, name  =  'Entries')%>%
layout("1 Av",showlegend = T)
plot_ly(temp, type = 'scatter', mode = 'lines')
add_trace(x = temp$date, y = temp$exits, name = 'Exits')
plot_ly(temp,   x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23), name = "SF Zoo",type = 'bar')
plot_ly(temp,   x = c("time"),
y = c("exits", "entries"), name = "SF Zoo",type = 'bar')
plot_ly(temp,   x = c("date"),
y = c("exits", "entries"), name = "SF Zoo",type = 'bar')
plot_ly(temp,   x = c(date),
y = c(exits, entries), name = "SF Zoo",type = 'bar')
plot_ly(temp,   x = c(temp$date),
y = c(temp$exits, temp$entries), name = "SF Zoo",type = 'bar')
plot_ly(temp,   x = temp$date,
y = temp$exits, temp$entries, name = "SF Zoo",type = 'bar')
plot_ly(temp,   x = temp$date,
y = temp$exits, name = "SF Zoo",type = 'bar')
plot_ly(temp,x = temp$date,
+         y = temp$exits, type = 'scatter', mode = 'lines')
plot_ly(temp,x = temp$date, y = temp$exits, type = 'scatter', mode = 'lines')
plot_ly(temp,x = ~date, y = ~exits, type = 'scatter', mode = 'lines')
plot_ly(temp,x = ~date, y = ~exits, type = 'scatter', mode = 'lines+markers')
plot_ly(temp,x = ~date, y = ~exits, type = 'scatter', mode = 'lines')
plot_ly(temp,x = ~date, y = ~exits, type = 'scatter', mode = 'lines',    line = list(color = 'rgb(205, 12, 24)', width = 4))
y = c(exits, entries), name = "SF Zoo",type = 'bar')
plot_ly(temp,x = ~date, y = ~exits, type = 'scatter', mode = 'lines+markers')
plot_ly(temp,x = ~date, y = ~exits, type = 'scatter', mode = 'markers')
plot_ly(temp,x = ~date, y = ~exits)
import plotly.express as px
plotly.express
install.packages("plotly.express")
import plotly.express as px
fig = px.line(temp, x=~date, y=~exits, title="Unsorted Input")
fig.show()
px.line(temp, x=~date, y=~exits, title="Unsorted Input")
runApp()
temp<- plot_ly(temp, x = ~x)
all_clean
runApp()
shiny::runApp()
input$selectInt
p$id
plot_ly(all_clean, type = 'scatter', mode = 'markers') %>%
filter(all_clean$stop_name == p$id) %>%
add_trace(x = ~date, y = ~exits, name = 'Exits')%>%
add_trace(x = ~date, y = ~entries, name  =  'Entries')%>%
layout(title = p$id,showlegend = T)
plot_ly(all_clean[which(all_clean$stop_name %in% p$id),],, type = 'scatter', mode = 'markers') %>%
add_trace(x = ~date, y = ~exits, name = 'Exits')%>%
add_trace(x = ~date, y = ~entries, name  =  'Entries')%>%
layout(title = p$id,showlegend = T)
plot_ly(all_clean[which(all_clean$stop_name %in% p$id),], type = 'scatter', mode = 'markers') %>%
add_trace(x = ~date, y = ~exits, name = 'Exits')%>%
add_trace(x = ~date, y = ~entries, name  =  'Entries')%>%
layout(title = p$id,showlegend = T)
runApp()
runApp()
runApp()
shiny::runApp()
?leaflet
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
